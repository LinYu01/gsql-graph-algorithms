*ATTR**SUB* CREATE QUERY cc_subquery*EXT* (VERTEX source, INT numVert, INT maxHops) FOR GRAPH social RETURNS(FLOAT) {
*ACCM**SUB* CREATE QUERY cc_subquery*EXT* (VERTEX source, INT numVert, INT maxHops) FOR GRAPH social RETURNS(FLOAT) {
*FILE**SUB* CREATE QUERY cc_subquery*EXT* (VERTEX source, INT numVert, INT maxHops) FOR GRAPH social RETURNS(FLOAT) {
# Subquery returns closeness centrality for vertex source in graph with numVert vertices 
        SumAccum<int> @@currDist, @@totalDist;
         OrAccum<bool> @visited;
 
# Initialize: Set the input vertex source as the starting point
        Start = {source};
        Start = SELECT s FROM Start:s
                ACCUM s.@visited += true;
 
# totalDist = sum (distance between vertex s and all connected neighbors)
        WHILE (Start.size() > 0) LIMIT maxHops DO    # explore up to (maxHops) hops FROM s
                @@currDist += 1;
                # Move FROM the current start set to the neighboring set of (unvisited) vertices
                Start = SELECT t FROM Start:s -(*edge-types*:e)-> :t
                        WHERE t.@visited == false AND t != s
                        POST-ACCUM t.@visited += true;
                                   @@totalDist += Start.size() * @@currDist;
        END;
 
        IF @@totalDist > 0 THEN
                RETURN ((numVert - 1) * 1.0) / (@@totalDist * 1.0);
        ELSE
                RETURN (-1.0);
        END;
 }

*ATTR*CREATE QUERY closeness_cent*EXT* () FOR GRAPH social {
*ACCM*CREATE QUERY closeness_cent*EXT* (BOOL display, INT outputLimit) FOR GRAPH social {
*FILE*CREATE QUERY closeness_cent*EXT* (FILE f) FOR GRAPH social {
# Closeness Centrality main query

*ACCM*  TYPEDEF TUPLE<VERTEX Vertex_ID, FLOAT score> vertexScore;
*ACCM*  HeapAccum<vertexScore>(outputLimit, score DESC) @@topScores;
        SumAccum<float> @score;
*ACCM*  SetAccum<EDGE> @@edgeSet;                   # list of all edges, if display is needed
  
        INT numVert;
        INT maxHops = 10;      # measure distance for vertices up to 10 hops away
  
        Start = {*vertex-types*};

        #Total number of vertices considered in graph
        numVert = Start.size();

        # get closeness centrality for each vertex
*FILE*  f.println("Vertex_ID", "Closeness");
        Start = SELECT s FROM Start:s
                POST-ACCUM s.@score = cc_subquery*EXT*(s,numVert,maxHops),
*ATTR*                     s.*vFltAttr* = cc_subquery*EXT*(s,numVert,maxHops);
*ACCM*                     @@topScores += vertexScore(s, cc_subquery*EXT*(s,numVert,maxHops));
*FILE*                     f.println(s, cc_subquery*EXT*(s,numVert,maxHops));

*ACCM*  PRINT @@topScores;
*ACCM*  IF display THEN
*ACCM*          PRINT Start[Start.@score];
*ACCM*          Start = SELECT s
*ACCM*                  FROM Start:s -(*edge-types*:e)-> :t
*ACCM*                  ACCUM @@edgeSet += e;
*ACCM*          PRINT @@edgeSet;
*ACCM*  END;
}


