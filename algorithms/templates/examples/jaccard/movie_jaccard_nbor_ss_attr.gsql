*ATTR*CREATE QUERY jaccard_nbor_ss*EXT* (VERTEX<Person> source, INT topK) FOR GRAPH movie {
*ACCM*CREATE QUERY jaccard_nbor_ss*EXT* (VERTEX source, INT topK) FOR GRAPH movie {
*FILE*CREATE QUERY jaccard_nbor_ss*EXT* (VERTEX source, INT topK, FILE f) FOR GRAPH movie {
/* This query calculates the Jaccard Similarity between a given vertex and every other vertex.
Jaccard similarity = intersection_size / (size_A + size_B - intersection_size)
1. The JSON and FILE version keeps the top k pairs of vertices. The result in FILE version is not in order.
2. The Attribute version insert edges between the pairs, with the score as an edge attribute.
   A similarity edge with one FLOAT attribute in the schema is required for this version.
*/
        SumAccum<INT> @intersection_size, @@set_size_A, @set_size_B;
        SumAccum<FLOAT> @similarity;

        Start (ANY) = {source};
        Start = SELECT s
        	FROM Start:s
                ACCUM @@set_size_A += s.outdegree("Likes");

        Subjects = SELECT t
                   FROM Start:s-(Likes:e)-:t;

        Others = SELECT t
                 FROM Subjects:s -(Reverse_Likes:e)- :t
                 WHERE t != source
                 ACCUM t.@intersection_size += 1,
                       t.@set_size_B = t.outdegree("Likes")
                 POST-ACCUM t.@similarity = t.@intersection_size*1.0/(@@set_size_A + t.@set_size_B - t.@intersection_size)
                 ORDER BY t.@similarity DESC
                 LIMIT topK;

*ATTR*  Others = SELECT s
*ATTR*           FROM Others:s
*ATTR*           POST-ACCUM insert into *insert-edge-name* values(source, s, s.@similarity);

*ACCM*  PRINT Others.@similarity;

*FILE*  f.println("Vertex1", "Vertex2", "Similarity");
*FILE*  Others = SELECT s
*FILE*           FROM Others:s
*FILE*           POST-ACCUM f.println(source, s, s.@similarity);

}

