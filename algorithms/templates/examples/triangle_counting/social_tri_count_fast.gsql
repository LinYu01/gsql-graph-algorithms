CREATE QUERY tri_count_fast() FOR GRAPH social {
# Compute the total number of triangles in the graph
# This algorithm is faster than tri_count but uses additional memory for temporary storage
        SumAccum<int> @@cnt, @outdegree;
        SetAccum<int> @neighbors;
      
        all = {Person.*};
        all = SELECT s
              FROM all:s
              ACCUM s.@outdegree += s.outdegree("Coworker");

        tmp = SELECT s
              FROM all:s -((Coworker)) -:t
              ACCUM IF s == t THEN 
                      s.@outdegree += -1
              END;
  
# We build up our neighbor lists manually because we'll only build them up on the 2 smaller vertices on a triangle. 

        tmp = SELECT t
              FROM all:s-((Coworker))-> :t
              WHERE s.@outdegree > t.@outdegree OR (s.@outdegree == t.@outdegree AND getvid(s) > getvid(t))
              ACCUM t.@neighbors += getvid(s);

# Here we compute the intersection for 2 points on the triangle.
        tmp = SELECT t
              FROM all:s-((Coworker))-> :t
              WHERE s != t
              ACCUM @@cnt += COUNT(s.@neighbors INTERSECT t.@neighbors);
                   
# Divide by 2 because every triangle was counted twice
        PRINT @@cnt/2 AS num_triangles;

}
