*ATTR*CREATE DISTRIBUTED QUERY conn_comp*EXT* () FOR GRAPH social {
*ACCM*CREATE DISTRIBUTED QUERY conn_comp*EXT* () FOR GRAPH social {
*FILE*CREATE DISTRIBUTED QUERY conn_comp*EXT* (FILE f) FOR GRAPH social {
# This query identifies the Connected Components (undirected edges)

        MinAccum<int> @cc_id = 0;       //each vertex's tentative component id
        SumAccum<int> @old_id = 0;
        OrAccum<bool> @active;
        MapAccum<int, int> @@compSizes;
  
        Start = {ANY};

# Initialize: Label each vertex with its own internal ID
        S = SELECT x 
            FROM Start:x
            POST-ACCUM x.@cc_id = getvid(x),
                       x.@old_id = getvid(x)        
            ;

# Propagate smaller internal IDs until no more ID changes can be DOne
        WHILE (Start.size()>0) DO
                Start = SELECT t
                        FROM Start:s -(:e)-> :t
                        ACCUM t.@cc_id += s.@cc_id // If s has a smaller id than t, copy the id to t
                        POST-ACCUM
                                CASE WHEN t.@old_id != t.@cc_id THEN // If t's id has changed
                                        t.@old_id = t.@cc_id,
                                        t.@active = true
                                ELSE 
                                        t.@active = false
                                END
                        HAVING t.@active == true
                        ;
        END;

        Start = {ANY};

*ATTR*  Start = SELECT s FROM Start:s
*ATTR*          POST-ACCUM s.*vIntAttr* = s.@cc_id;

*ACCM*  Start = SELECT s FROM Start:s
*ACCM*          POST-ACCUM @@compSizes += (s.@cc_id -> 1);
*ACCM*  PRINT @@compSizes;
*ACCM*  PRINT Start.@cc_id;

*FILE*  f.println("Vertex_ID","Component_ID");
*FILE*  Start = SELECT s FROM Start:s
*FILE*        	POST-ACCUM f.println(s, s.@cc_id);
}

#INSTALL QUERY conn_comp*EXT*
