CREATE QUERY knn_cosine_ss (VERTEX source, INT topK) FOR GRAPH movie RETURNS (STRING) {
/* This query is k-nearest neighbors based on Cosine Similarity between a given vertex and every other vertex.
Cosine similarity = A \dot B / ||A|| \dot ||B||
The output is the predicted label for the source vertex, which is the majority label of its k-nearest neighbors. 
*/
        SumAccum<FLOAT> @numerator, @@norm1, @norm2, @similarity;
        MapAccum<STRING, INT> @@labels_count_map;
        INT max_count = 0;
        STRING predicted_label;

        # calculate similarity and find the top k nearest neighbors
        start = {source};
        subjects = SELECT t
                   FROM start:s -((Likes):e)-> :t
                   ACCUM t.@numerator = e.weight,
                         @@norm1 += pow(e.weight, 2);

        neighbours = SELECT t
                     FROM subjects:s -(Reverse_Likes:e)-> Person:t
                     WHERE t != source AND t.known_label != ""    # only consider the neighbours with known label
                     ACCUM t.@numerator += s.@numerator * e.weight;

        kNN = SELECT s
              FROM neighbours:s -((Likes):e)-> :t
              ACCUM s.@norm2 += pow(e.weight, 2)
              POST-ACCUM s.@similarity = s.@numerator/sqrt(@@norm1 * s.@norm2)
              ORDER BY s.@similarity DESC
              LIMIT topK; 

        #predict label
        kNN = SELECT s
              FROM kNN:s
              ACCUM @@labels_count_map += (s.known_label -> 1);
        
        FOREACH (label, cnt) IN @@labels_count_map DO
            IF cnt > max_count THEN
                max_count = cnt;
                predicted_label = label;
            END;
        END;
 
        PRINT predicted_label;
        RETURN predicted_label;
}
