  CREATE QUERY cosine_nbor_ap_sub_file (VERTEX source, INT topK, FILE f) FOR GRAPH movie{
/* This subquery calculates the Cosine Similarity between a given vertex and every other vertex.
Cosine similarity = A \dot B / ||A|| \dot ||B||
*/

        SumAccum<FLOAT> @numerator, @@norm1, @norm2, @similarity;

        start = {source};
        subjects = SELECT t
                   FROM start:s -(Likes:e)-> :t
                   ACCUM t.@numerator = e.weight,
                         @@norm1 += pow(e.weight, 2);

        neighbours = SELECT t
                     FROM subjects:s -(Reverse_Likes:e)-> Person:t
                     WHERE t != source
                     ACCUM t.@numerator += s.@numerator * e.weight;

        neighbours = SELECT s
                     FROM neighbours:s -(Likes:e)-> :t
                     ACCUM s.@norm2 += pow(e.weight, 2)
                     POST-ACCUM s.@similarity = s.@numerator/sqrt(@@norm1 * s.@norm2)
                     ORDER BY s.@similarity DESC
                     LIMIT topK;
        neighbours = SELECT s
                     FROM neighbours:s
                     POST-ACCUM f.println(source, s, s.@similarity);
}


      CREATE QUERY cosine_nbor_ap_file (INT topK, FILE f) FOR GRAPH movie{
/* This query calls the subquery cosine_nbor_ap_sub_file to get the similarity score of every pair of vertices.
1. The JSON and FILE version keeps the top k pairs of vertices. The result in FILE version is not in order.
2. The Attribute version insert edges between the pairs, with the score as an edge attribute.
   A similarity edge with one FLOAT attribute in the schema is required for this version.
*/
        start = {Person.*}; 
        f.println("Vertex1","Vertex2","Similarity");
        start = SELECT s
                FROM start:s
                ACCUM cosine_nbor_ap_sub_file(s, topK, f);
}

