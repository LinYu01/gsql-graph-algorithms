CREATE QUERY tg_greedy_graph_coloring(SET<STRING> v_type,
                                   SET<STRING> e_type,
                                   UINT max_colors = 999999,
                                   BOOL print_color_count = TRUE,
                                   BOOL display = TRUE, 
                                   STRING file_path = "")
  {
  
  /* Greedy Graph Coloring algorithm
  This is a distributed algorithm for coloring graph on large-scale 
  undirect graphs with one edge type.In every iteration, the vertices 
  send its color to its out-neighbors, and the neighbors get assigned 
  a different color. 
  Conditions:
    -  No two adjacent vertices in the graph should have same color
    -  Until above condition is achieved , keep on finding conflicts 
       and resolve them.
    -  Stop the conflict detection when there are no resolution left.
   Arguments:
   -  v_type: Pass a set of all the vertex types which need to colored
               from the graph.
   -  e_type: Pass a set of all the edge types connecting above mentioned
              edge types.
   -  max_colors: Maximum number of colors allowed to color the entire graph. 
                  Use a large number like 999999 unless there is strict limit 
                  required.
   -  print_color_count:  If set to true, the total colors used to color all vertex 
                          types will be displayed.
   -  display: If set to true, will display all the vertices and associated color.
   -  file_path: If provided, will print results with all vertex Set and color to a file.
  */
  
  TYPEDEF tuple<INT color> testColor;
  AndAccum<BOOL> @@isconflict=true;
  HeapAccum<testColor>(max_colors,color ASC) @color;
  SumAccum<INT> @colorvertex;
  MaxAccum<INT> @@counter;
  SetAccum<EDGE> @@edgeSet;
  SetAccum<Vertex> @@vertexSet;
  FILE f(file_path);
  
  #initialization - coloring All vertices
  coloring = {v_type};
  coloring = SELECT s 
             FROM coloring:s 
             POST-ACCUM s.@colorvertex+=1,@@counter+=s.@colorvertex;
  
  #conflict detection and resolution
  WHILE @@isconflict DO
    start= {v_type};
  
    #clear the color heap for all vertices
    start = SELECT s 
            FROM start:s
            POST-ACCUM s.@color.clear();
  
    #create a color heap for all vertices
    start = SELECT t 
            FROM start:s-(e_type:e)-v_type:t
            ACCUM t.@color+=testColor(s.@colorvertex);
  
    #detect all conflicts
    conflict = SELECT t 
               FROM start:s-(e_type:e)-v_type:t
               WHERE s.@colorvertex == t.@colorvertex 
                      and getvid(s)>getvid(t);
  
    #resolve all detected conflicts 
    resolved = SELECT t 
               FROM conflict:t
               POST-ACCUM 
                   t.@colorvertex = 1, 
                   FOREACH item in t.@color DO
                      CASE WHEN (item.color == t.@colorvertex) 
                        THEN
                          t.@colorvertex += 1,@@counter+=t.@colorvertex END,
                      CASE WHEN (item.color > t.@colorvertex) 
                         THEN  
                         BREAK END
                   END;
  
    #ending the conflict detection and resolution
    IF resolved.size()<1 
      THEN 
        @@isconflict+=false; 
      END;
  
  END;
  
  #collecting results
  start = {v_type};
  start = SELECT t 
          FROM start:s-(e_type:e)-v_type:t
          POST-ACCUM 
              IF file_path != "" THEN
                  f.println(t,t.@colorvertex)
              END;
  
  #printing and storing the results
  IF print_color_count THEN
           PRINT @@counter as color_count;
  END;
  IF display THEN
           PRINT start [start.@colorvertex];
  END;

}
