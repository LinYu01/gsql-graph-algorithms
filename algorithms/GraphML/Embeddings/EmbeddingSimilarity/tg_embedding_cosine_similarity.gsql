CREATE QUERY tg_embedding_cosine_similarity(VERTEX v1, SET<STRING> vert_types, INT embeddingDim, INT k) { 
    /*
    This query calculates the embedding cosine similarity between one vertex and a set of others.
    Higher the number (maximum of 1), the more similar two vertices are. A 0 value indicates two vertices are not similar.

    NOTE: This query needs to be modified based upon your schema to set the embedding attribute accordingly.

    Parameters :
        v1 : Input vertex one
        vert_types: vertex types to compare the input vertex against
        embeddingDim: dimension of the vertex embedding
        k: number of similar vertices to return, with most similar first
    */
    ListAccum<DOUBLE> @@embedding1;
    MapAccum<INT, ListAccum<DOUBLE>> @@embeddings;
    MapAccum<INT, DOUBLE> @@similarity;
    SumAccum<DOUBLE> @similarityScore;

    v1_set = {v1};
    start = {vert_types};

    info = SELECT s
           FROM v1_set:s
           POST-ACCUM @@embedding1 += s.embedding;
    res = SELECT s
          FROM start:s WHERE s != v1
          ACCUM @@embeddings += (s.vert_index->s.embedding);

    @@similarity = cosine_similarity(@@embedding1, @@embeddings, embeddingDim);
    kMostSimilar = SELECT s 
                   FROM start:s 
                   POST-ACCUM s.@similarityScore += @@similarity.get(s.vert_index) 
                   ORDER BY s.@similarityScore 
                   DESC LIMIT k;
    PRINT kMostSimilar;
}