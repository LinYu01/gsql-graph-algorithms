CREATE QUERY tg_cosine_nbor_ss (VERTEX source, SET<STRING> e_type, SET<STRING> re_type, STRING weight, INT top_k, INT output_limit, BOOL print_accum = TRUE, STRING file_path = "", STRING similarity_edge = "") RETURNS (MapAccum<VERTEX, FLOAT>) {	
/* This query calculates the Cosine Similarity between a given vertex and every other vertex.	
Cosine similarity = A \dot B / ||A|| \dot ||B||	
*/	
        SumAccum<FLOAT> @numerator, @@norm1, @norm2, @similarity;	
        MapAccum<VERTEX, FLOAT> @@topK_result;	
        FILE f (file_path);
  
  
        start = {source};	
        subjects = SELECT t	
                   FROM start:s -(e_type:e)-> :t	
                   ACCUM t.@numerator = e.getAttr(weight, "FLOAT"),	
                         @@norm1 += pow(e.getAttr(weight, "FLOAT"), 2);	

        neighbours = SELECT t	
                     FROM subjects:s -(re_type:e)->:t	
                     WHERE t != source	
                     ACCUM t.@numerator += s.@numerator * e.getAttr(weight, "FLOAT");	

        neighbours = SELECT s	
                     FROM neighbours:s -(e_type:e)-> :t	
                     ACCUM s.@norm2 += pow(e.getAttr(weight, "FLOAT"), 2)	
        	     POST-ACCUM s.@similarity = s.@numerator/sqrt(@@norm1 * s.@norm2)	
                     ORDER BY s.@similarity DESC	
                     LIMIT top_k;	
      neighbours = SELECT s
                  FROM neighbours:s
                  POST-ACCUM 
                    IF similarity_edge != "" THEN INSERT INTO EDGE similarity_edge VALUES(source, s, s.@similarity) END,
                    IF file_path != "" THEN f.println(source, s, s.@similarity) END,
                    IF print_accum THEN @@topK_result += (s -> s.@similarity) END 
                  LIMIT output_limit;
    
      IF print_accum THEN
        PRINT neighbours[neighbours.@similarity];
      END;
  
      RETURN @@topK_result;
}