CREATE QUERY tg_jaccard_batch (string v_type, string e_type, string re_type, int topK, bool print_accum = true, string similarity_edge, string file_path, int num_of_batches = 1) {
  /*
    Calculates the Jaccard Simiarlity between a given vertex and every other vertex.
      Jaccard Similarity = intersection_size / (setSize_all + setSize_self - intersection_size)

    Paramaters :
      v_type  : start vertex types
      e_type  : directed edge types to traverse
      re_type : reverse edge types to  traverse
      topK    : # of top scores to report for each vertex
      print_accum : print JSON output
      similarity_edge : edge type for storing vertex-vertex similarity scores
      file_path   : file to write CSV output to
      num_of_batches  : how many batches to split up the query into (trade off parallelism for memory optimization)
  */
  TYPEDEF TUPLE<vertex ver, float val> res_tup; # storing results in the Heap
  MapAccum<VERTEX, INT> @setSize_all, @intersectionSize; # set sizes of all vertices
  SumAccum<INT> @setSize_self; # set size of each vertex
  HeapAccum<res_tup>(topK, val desc) @heap; # stores topK similarity results
  MapAccum<vertex, AvgAccum> @similarity; # map of similarity scores for each vertex 
  file f (file_path);

# get set sizes for all given vertices of the input type
  Start = {v_type.*};
  Start = SELECT s
          FROM Start:s
          ACCUM s.@setSize_self += s.outdegree(e_type);

# get global comparison of set sizes of input vertex type
  Subjects = SELECT t
             FROM Start:s-(e_type:e)-:t
             ACCUM t.@setSize_all += (s -> s.outdegree(e_type));

# first get intersection size for each vertex
  FOREACH i IN RANGE[0,num_of_batches-1] DO
    Others = SELECT t
             FROM Subjects:s-(re_type:e)-:t
             WHERE getvid(t) % num_of_batches == i
             ACCUM
               FOREACH (k,v) IN s.@setSize_all DO
                 CASE WHEN k != t THEN
                   t.@intersectionSize += (k -> 1)
                 END
               END;

# compute similarity score and store into map temporarily, then store only topK in the heap
    Others = SELECT t
             FROM Subjects:s-(re_type:e)-:t
             WHERE getvid(t) % num_of_batches == i
             ACCUM
               FOREACH (k,v) IN s.@setSize_all DO
                 CASE WHEN k != t THEN
                   t.@similarity += (k -> t.@intersectionSize.get(k)*1.0/(v + t.@setSize_self - t.@intersectionSize.get(k)))
                 END
               END
             POST-ACCUM
               FOREACH (k,v) IN t.@similarity DO
                 t.@heap += res_tup(k,v)
               END;

  END;

# output to file/JSON or insert edge
  Start = SELECT t
          FROM Start:t
          POST-ACCUM
            FOREACH tup IN t.@heap DO
              CASE WHEN tup.val > 0 THEN
                  IF file_path != "" THEN
                    f.println(t, tup.ver, tup.val)
                  END,
                  IF similarity_edge != "" THEN
                    INSERT INTO EDGE similarity_edge VALUES (t, tup.ver, tup.val)
                  END
              END
            END
            ORDER BY getvid(t) ASC;

  IF print_accum THEN
    PRINT Start[Start.@heap];
  END;

}
