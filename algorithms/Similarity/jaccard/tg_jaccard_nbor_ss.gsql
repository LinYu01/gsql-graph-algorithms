CREATE QUERY tg_jaccard_nbor_ss (VERTEX source, STRING e_type, STRING rev_e_type, 
 INT top_k = 100, BOOL print_accum = TRUE, STRING similarity_edge_type = "", STRING file_path = "") {
/* 
Calculates the Jaccard Similarity between a given vertex and every other vertex.
  Jaccard similarity = intersection_size / (size_A + size_B - intersection_size)
Parameters:
 source: start vertex                           top_k: #top scores to report
 e_type: directed edge types to traverse        print_accum: print JSON output
 rev_e_type: reverse edge types to traverse     file_path: file to write CSV output to
 similarity_edge_type: edge type for storing vertex-vertex similarity scores

  This query current supports only a single edge type (not a set of types) - 8/13/20
*/
	SumAccum<INT> @intersection_size, @@set_size_A, @set_size_B;
	SumAccum<FLOAT> @similarity;
	FILE f (file_path);

	Start (ANY) = {source};
	Start = SELECT s
	    FROM Start:s
			ACCUM @@set_size_A += s.outdegree(e_type);

	Subjects = SELECT t
			   FROM Start:s-(e_type:e)-:t;

	Others = SELECT t
			 FROM Subjects:s -(rev_e_type:e)- :t
			 WHERE t != source
			 ACCUM t.@intersection_size += 1,
				   t.@set_size_B = t.outdegree(e_type)
			 POST-ACCUM t.@similarity = t.@intersection_size*1.0/(@@set_size_A + t.@set_size_B - t.@intersection_size)
			 ORDER BY t.@similarity DESC
			 LIMIT top_k;

	IF file_path != "" THEN
		f.println("Vertex1", "Vertex2", "Similarity");
	END;


	Others = SELECT s
			 FROM Others:s
			 POST-ACCUM 
				IF similarity_edge_type != "" THEN
					INSERT INTO EDGE similarity_edge_type VALUES (source, s, s.@similarity)
				END,
				IF file_path != "" THEN f.println(source, s, s.@similarity) END; 

	IF print_accum THEN
		PRINT Others[Others.@similarity];
	END;
}