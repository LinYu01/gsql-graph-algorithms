# GSQL Algorithm Library
For TigerGraph version 3.1 or higher
9/4/2021

The GSQL Graph Algorithm Library is a collection of high-performance GSQL queries,
each of which implements a standard graph algorithm. Each algorithm is ready to be
installed and used, either as a stand-alone query or as a building block of a larger
analytics application.GSQL running on the TigerGraph platform is particularly
well-suited for graph algorithms:

* Turing-complete with full support for imperative and procedural programming,
 ideal for algorithmic computation.

* Parallel and Distributed Processing, enabling computations on larger graphs.

* User-Extensible.
  Because the algorithms are written in standard GSQL and compiled by the user,
  they are easy to modify and customize.

* Open-Source. Users can study the GSQL implementations to learn by
  example, and they can develop and submit additions to the library.
  
## 9/9/21
* Format Changes
  > Algorithms are now organized into category folders, e.g. Centrality.
  > The prefix "tg_" has been appended to all algorithms, to more easily distinguish
    them from user-authored queries.  Some queries have been renamed to follow
    naming conventions more closely.
  > All algorithms are now available Schema-Free.
  > Change log for each individual algorithm.
  
* Algorithms, cumulative changes since 6/21/21
  * Graph Embedding
    > Node2vec (NEW, beta)
    > FastRP (NEW, beta, 2 versions)
    > Random Walk (NEW, beta, 2 versions)
  * Centrality
    > Harmonic Centrality (NEW, beta)
    > Betweenness (speed improvement)
    > Closeness (speed improvement)
  * Community Detection
    > Local Clustering Coefficient (NEW, beta)
    > Louvain (NEW version for distributed graphs)
    > Weakly Connected Component (NEW version optimized for small world graphs)
    > Strongly Connected Component (NEW version optimized for small world graphs)
    > Triangle Count (Converted to Schema-Free, requires TigerGraph 3.1+)
 * Similarity
    > Cosine (batch version for better memory efficiency)
    > Jaccard (batch version for better memory efficiency)


## 6/21/21 Key Changes since version 3.0
* New Graph/ML node embedding algorithm `node2vec` added in `/algorithms/examples/Graph+ML`
* New schema-free algorithms: `greedy_graph_coloring`, `closeness_cent_approx_query`, `cosine_batch`, `jaccard_batch`
* Nearly all the algorithms now work as schema-free algorithms, making them much easier
  to use
* Instead of having up to 3 versions of an algorithm, to handle 3 different choices
  for output style, they have been merged into one version, with parameters for output
  filename and/or attribute to store the result.
* Parameter list updates:
  - Runtime vertex and edge type parameters are added to make algorithms schema-free
  - Result format parameters (`print_accum`, `result_attr` and `file_path`) are added 
  - Other parameters are added to make the algorithms easier to tune

## Library Structure


You can download the library from github:
https://github.com/tigergraph/gsql-graph-algorithms

The library contains two main sections: Algorithms and Tests.

The Algorithms folder contains template algorithms and scripts to help you customize
and install them. There are three folders:
		
	schema-free/
	    contains GSQL queries which are ready to use as is, relying on
	    input parameters to specify vertex types and edge types.
	        
	templates/
		contains template algorithms with some placeholder code
		and markers which need to be acted on by the installation script.

	examples/
		contains GSQL queries generated from the templates by the installation script.
		
The Tests folder contains small sample graphs that you can use to experiment with the
algorithms. In our online documentation, we use the test graphs to show you the expected
result for each algorithm. The graphs are small enough that you can manually calculate
and sometimes intuitively see what the answers should be.


## Table of GSQL Graph Algorithms
As of June 21st, 2021

| Query name              | Description                                                                |
|-------------------------|----------------------------------------------------------------------------|
| `betweenness_cent`      | Betweenness centrality                                                     |
| `closeness_cent_approx` | Approximate closeness centrality                                           |
| `closeness_cent`        | Closeness centrality                                                       |
| `conn_comp`             | Connected component detection                                              |
| `cosine_batch`          | Cosine similarity for each pair of vertices, computed in batches           |
| `cosine_nbor_ap`        | Cosine similarity for each pair of vertices                                |
| `cosine_nbor_ss`        | Cosine similarity from a single vertex                                     |
| `cycle_detection`       | Rochaâ€“Thatte algorithm for cycle detection                                 |
| `estimate_diameter`     | Heuristic estimate of graph diameter                                       |
| `greedy_graph_coloring` | Greedy graph coloring                                                      |
| `jaccard_batch`         | Jaccard similarity for each pair of vertices, computed in batches          |
| `jaccard_nbor_ap` [2]   | Jaccard similarity for each pair of vertices                               |
| `jaccard_nbor_ss` [2]   | Jaccard similarity from a single vertex                                    |
| `kcore`                 | K-Core                                                                     |
| `knn_cosine_all`        | k-Nearest Neighbor classification, using cosine similarity, batch          |
| `knn_cosine_cv`         | Cross validation for k-Nearest Neighbor, using cosine similarity           |
| `knn_cosine_ss`         | k-Nearest Neighbor classification, using cosine similarity, single source  |
| `label_prop`            | Label propagation method for community detection                           |
| `louvain_parallel`      | Parallel Louvain Modularity Method with refinement for community detection |
| `maximal_indep_set`     | Maximal independent set                                                    |
| `msf`                   | Minimum spanning forest (MSF)                                              |
| `mst`                   | Minimum spanning tree (MST)                                                |
| `pageRank_pers` [2]     | Personalized PageRank                                                      |
| `pageRank_wt` [2]       | Weighted PageRank                                                          |
| `pageRank` [2]          | PageRank measurement of relative influence of each vertex                  |
| `scc`                   | Strongly connected component detection                                     |
| `shortest_ss_any_wt`    | Single-Source shortest paths                                               |
| `shortest_ss_no_wt`     | Single-Source shortest paths without weight                                |
| `shortest_ss_pos_wt`    | Single-Source shortest paths with positive weight                          |
| `tri_count_fast` [1]    | Count all the triangles, faster but using more memory                      |
| `tri_count` [1]         | Count all the triangles, memory effient                                    |
| `wcc_fast`              | Connected Components (Fast)                                                |

Notes:
[1] This algorithm is not in the schema-first folder; use the install.sh script to customize it
    for your target graph schema
[2] The schema-free version of this algorithm can use only one edge type.
    If you have a set of edge types, use the template algorithm and the install.sh script

Each non-schema-free template algorithm comes in three forms:

pageRank.gsql - base version. Results are provided as JSON output.
		Not persisted to the graph database.

pageRank_file.gsql - Results are in CSV format to a file.
		Not persisted to the graph database.

pageRank_attr.gsql - Results are written to vertex or edge attributes
		which the user specifies.

The schema-free algorithms ofter all three options in one algorithm.

## Get Started

If you want to use one of the test graphs, load it before installing the algorithms:
See the README.test file in the tests folder


* Template algorithms:
  1. Create a graph schema in GSQL first.
  2. Change into the algorithms folder.
  3. Run the installation script `install.sh` and answer the questions.
   
* Schema-free algorithms:
  1. Change the graph name specified in CREATE statement.
  2. Use the script directly.

More detailed documentation and examples are available on the web at
https://docs.tigergraph.com/graph-algorithm-library





